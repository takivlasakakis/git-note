1. Classes are structures that we build. They encapsulate one specific idea/object that has all the data and functionality it needs to be useful. The data part is the instance variables for that class, this is where we are able to keep track of the state of an instance of the class. The behavior is given to the class by us, the programmers, in the form of methods.

2. Often there is some basic functionality that we want to come with our instance variables. The old way was to create an instance variable and then write all the accessor methods required to get in there and do things like read/write the instance variables. Attributes let us bypass that last part; essentially they are still instance variables but they also come with read and/or write functionality built in.

3. Let's imagine a trophy; except it's not just any old plastic trophy...it's a plastic trophy...with an led light on top of it's head. So we have three attributes to fully describe the state of the trophy:
    1. the color of the led light (it can change)
    2. the string of text, "Fastest Cup Stacker", engraved on the plate bolted to the bottom of the trophy 
    3. the string of text that will hold the name of the fastest cupstacker who wins the trophy
So it's a good idea to use attributes in this case because we do want some built in functionality that each instance of the trophy will have when Rachael Nedrow's dad comes to the store to buy his instance of our trophy class. But the important thing is why type of attribute should we make 1-3. Both the color and the string, "Fastest Cup Stacker" need to be readable by anyone (attr_reader) because it wouldn't be fun if you couldn't see the shiny light or see what the heck the trophy is trying to celebrate; however, once that instance trophy goes to market we don't want the super badass and patented method that our developers made to make the light fad from purple to aqua blue to be tampered with. We also don't want anyone to be able to change the engraved string. Conversely we do want anyone to be able to change the string of text that will hold the name of person who is getting the award, in this case "Rachael Nedrow".

4. The initialize method is run whenever we create an instance of our class. It's purpose is to set up the initial state of the class, usually by taking parameters and assigning their values to our instance variables and by doing our own personal housekeeping and setting the initial state of the instance variables without asking for parameters.

5. Modules are different than classes. Classes encapsulate an entire idea with the data and behavior to back it up; in contrast modules encapsulate some related behavior in the form of a collection of methods.

6. One of the main ways that we can use modules is as a mechanism for protecting our methods from being modified or accessed when they're not supposed to be. If we have a super common method like "explode_selected" and we're writing some web application it's possible that different that method name is being used in a bunch of different contexts for example maybe some Window can be broken into four pieces when "explode_selected" is called, but then maybe within the application there is a evil robot character that will visually blow up when "explode_selected" is called on it, these are two methods with the same name doing completely different things. By putting the method inside a module we can protect it from being used in the wrong context so instead of calling "explode_selected" willy nilly we could use modules and call Window.explode_selected or Character.explode_selected.

Another way to use modules is to create a mixin, which is basically a module that we stick inside a class, like we could have a module called PaintItBlack with all the functionality required to paint stuff black that we stick inside our two classes RedDoor and GreenSea. Now, when we see a RedDoor and we want it painted black, we can access the PaintItBlack functionality. Similarly we don't want our GreenSea to turn a deeper blue...because we want it black and we can paint it black because GreenSea has the PaintItBlack module inside it. So cool.